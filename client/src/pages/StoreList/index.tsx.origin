import React, { Component } from 'react';
import { RouteComponentProps } from 'react-router';
import Async from 'react-async';
import { Link } from 'react-router-dom';
import { inject, observer } from 'mobx-react';
import autobind from 'autobind-decorator';
import InfiniteScroll from 'react-infinite-scroller';

import { Layout, List, Avatar, Spin } from 'antd';

import { PAGE_PATHS, STORES } from '../../constants';
import StoreStore from '../../stores/store/StoreStore';
import AddressStore from '../../stores/address/AddressStore';
import { observable } from 'mobx';

const { Content } = Layout;

type InjectedProps = {
  [STORES.STORE_STORE]: StoreStore;
  [STORES.ADDRESS_STORE]: AddressStore;
} & RouteComponentProps<{ category_seq: string }>;

@inject(STORES.STORE_STORE)
@inject(STORES.ADDRESS_STORE)
class StoreList extends Component<InjectedProps & RouteComponentProps> {
  @observable
  loading = false;

  constructor(props: any) {
    super(props);

    let category_seq = this.props.match.params.category_seq;
    let address = this.props[STORES.ADDRESS_STORE].address;

    this.state = {
      stores: [],
      items: 20,
      loading: false,
      hasMoreItems: true,
      category_seq: category_seq,
      address,
    };

    this.props[STORES.STORE_STORE]
      .getStoreByCategoryAndAddress({
        category_seq: this.state['category_seq'],
        address: this.state['address'],
      })
      .then(data => {
        if (data.length < this.state['items']) {
          this.setState({ items: data.length });
        }
        this.setState({ stores: data });
        this.loading = true;
        data;
      });
    this.loadItems = this.loadItems.bind(this);
  }

  loadItems = () => {
    console.log(this.state['category_seq']);
    return this.props[STORES.STORE_STORE]
      .getStoreByCategoryAndAddress({
        category_seq: this.state['category_seq'],
        address: this.state['address'],
      })
      .then(res => {
        console.log(res.data.data);
        return res.data;
      });
  };

  showItems = () => {
    let items = [];

    for (var i = 0; i < this.state['items']; i++) {
      if (this.state['stores'][i] !== undefined) {
        items.push(<li>{this.state['stores'][i]['store_name']}</li>);
      }
    }
    return items;
  };

  loadMore = () => {
    if (this.state['items'] >= this.state['stores'].length) {
      this.setState({ hasMoreItems: false });
    } else {
      setTimeout(() => {
        this.setState({ items: this.state['items'] + 20 });
      }, 1000);
    }
  };

  render() {
    return (
      <Content style={{ backgroundColor: '#FFF', height: '100vh', position: 'relative' }}>

        <InfiniteScroll></InfiniteScroll>
        {/* <Async promise={this.loadItems()}>
          <Async.Loading>
            <div style={{ position: 'absolute', top: '50%', left: '50%' }}>
              <Spin size="large" />
            </div>
          </Async.Loading>
          <Async.Resolved>
            {(data: object) => {
              return (
                <List
                  dataSource={data['data']}
                  bordered
                  renderItem={store => (
                    <List.Item key={store['seq']}>
                      <img src="images/logo192.png" alt={store['store_name']} />
                      <List.Item.Meta
                        title={
                          <Link to={`${PAGE_PATHS.MENU_LISTS}/${store['seq']}`}>
                            {store['store_name']}
                          </Link>
                        }
                        description={store['description']}
                      />
                    </List.Item>
                  )}
                ></List>
              );
            }}
          </Async.Resolved>
        </Async> */}
      </Content>
    );
  }
}

export default StoreList;
